package com.jrafika.jrafika.core;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.Pair;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static java.lang.Math.abs;
import static java.lang.Math.min;

public class SkeletonPredictor implements ImageProcessor {

    private static final Map<Character, float[]> featureMap = new HashMap<>();

    private static final float[] featureWeight = new float[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 0.4f};

    static {
        featureMap.put('#', new float[]{0.02156805596036141f, 0.029779630732578916f, 0.035312024353120246f, 0.03468376566598659f, 0.0136986301369863f, 0.03561643835616438f, 0.02157626610728199f, 0.024188609920391915f, 0.0f, 6f, 6f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 2.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 2.0f, 2.0f, 2.0f, 3.0f, 1.0f, 2.0f, 2.0f, 3.0f, 2.0f, 2.0f, 3.0f, 1.0f, 2.0f, 3.0f, 3.0f, 0.0f, 4.0f, 3.0f, 2.0f, 2.0f, 0.6359447004608295f});
        featureMap.put('$', new float[]{0.025335775335775336f, 0.03822055137844611f, 0.018518518518518517f, 0.01421068890948409f, 0.039315155358275206f, 0.022757697456492636f, 0.01938711694809256f, 0.03818998716302952f, 0.022357723577235773f, 2f, 4f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 4.0f, 0.0f, 1.0f, 2.0f, 1.0f, 3.0f, 3.0f, 3.0f, 3.0f, 0.4538152610441767f});
        featureMap.put('&', new float[]{0.023880597014925373f, 0.026804751751446847f, 0.00808457711442786f, 0.026363636363636363f, 0.03927025355596784f, 0.004419191919191919f, 0.028307692307692308f, 0.01978021978021978f, 0.03782051282051282f, 2f, 4f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 2.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 2.0f, 0.0f, 2.0f, 2.0f, 0.0f, 2.0f, 2.0f, 2.0f, 2.0f, 2.0f, 4.0f, 0.7424242424242424f});
        featureMap.put('\\', new float[]{0.05f, 0.0f, 0.0f, 0.0f, 0.05f, 0.0f, 0.0f, 0.002238805970149254f, 0.05306799336650083f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.28292682926829266f});
        featureMap.put('\'', new float[]{0.5f, 0.0f, 0.0f, 0.5f, 0.0f, 0.0f, 0.5f, 0.0f, 0.0f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.03773584905660377f});
        featureMap.put('(', new float[]{0.025f, 0.025195968645016796f, 0.013002364066193853f, 0.05053191489361702f, 0.0f, 0.0f, 0.02391304347826087f, 0.02288329519450801f, 0.015096618357487922f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.20357142857142857f});
        featureMap.put(')', new float[]{0.01221001221001221f, 0.027472527472527472f, 0.0260989010989011f, 0.0f, 0.0f, 0.0625f, 0.018102372034956304f, 0.02871410736579276f, 0.023174157303370788f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.1918819188191882f});
        featureMap.put('*', new float[]{0.0f, 0.037037037037037035f, 0.0033333333333333335f, 0.044753086419753084f, 0.10648148148148148f, 0.04833333333333333f, 0.021885521885521887f, 0.03872053872053872f, 0.04363636363636364f, 5f, 3f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 3.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 1.0f, 2.0f, 2.0f, 1.0f, 2.0f, 2.0f, 2.0f, 2.0f, 1.0f, 0.0f, 3.0f, 0.0f, 0.0f, 3.0f, 0.0f, 3.0f, 3.0f, 3.0f, 3.0f, 1.1285714285714286f});
        featureMap.put('+', new float[]{0.0f, 0.02564102564102564f, 0.0f, 0.025f, 0.05f, 0.025f, 0.0f, 0.02564102564102564f, 0.0f, 4f, 1f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 2.0f, 1.0f, 1.0f, 2.0f, 1.0f, 2.0f, 2.0f, 2.0f, 2.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.9830508474576272f});
        featureMap.put(',', new float[]{0.0f, 0.0392156862745098f, 0.19117647058823528f, 0.0f, 0.0196078431372549f, 0.23529411764705882f, 0.1f, 0.12222222222222222f, 0.0f, 2f, 0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.32653061224489793f});
        featureMap.put('-', new float[]{1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2f, 0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 2.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 55.0f});
        featureMap.put('/', new float[]{0.0f, 0.008767123287671232f, 0.03752233472304944f, 0.0f, 0.04f, 0.0f, 0.040628385698808236f, 0.0005633802816901409f, 0.0f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3425925925925926f});
        featureMap.put('0', new float[]{0.03108003108003108f, 0.01594896331738437f, 0.03153153153153153f, 0.02564102564102564f, 0.0f, 0.02702702702702703f, 0.030048076923076924f, 0.016036184210526317f, 0.03125f, 0f, 0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.5816326530612245f});
        featureMap.put('1', new float[]{0.023076923076923078f, 0.021153846153846155f, 0.05524475524475524f, 0.0013020833333333333f, 0.0f, 0.045454545454545456f, 0.0f, 0.0f, 0.045454545454545456f, 3f, 1f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 2.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.3645833333333333f});
        featureMap.put('2', new float[]{0.023809523809523808f, 0.015289406625409537f, 0.03329506314580941f, 0.0f, 0.010716925351071693f, 0.025252525252525252f, 0.034432234432234435f, 0.02326454033771107f, 0.015384615384615385f, 2f, 1f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.6161616161616161f});
        featureMap.put('3', new float[]{0.02254249815225425f, 0.015521064301552107f, 0.03146853146853147f, 0.0f, 0.015151515151515152f, 0.03651903651903652f, 0.024390243902439025f, 0.015625f, 0.03125f, 3f, 1f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 2.0f, 1.0f, 0.0f, 1.0f, 1.0f, 1.0f, 2.0f, 1.0f, 2.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.6173469387755102f});
        featureMap.put('4', new float[]{0.0f, 0.025891181988742965f, 0.028007889546351084f, 0.030877976190476192f, 0.0011432926829268292f, 0.02564102564102564f, 0.020353302611367127f, 0.016129032258064516f, 0.0413564929693962f, 2f, 1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.6387434554973822f});
        featureMap.put('5', new float[]{0.03076923076923077f, 0.015384615384615385f, 0.011336032388663968f, 0.025f, 0.015625f, 0.032072368421052634f, 0.021774193548387097f, 0.016542597187758478f, 0.03098471986417657f, 2f, 1f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.612565445026178f});
        featureMap.put('6', new float[]{0.03108003108003108f, 0.01554001554001554f, 0.019656019656019656f, 0.04351204351204351f, 0.015151515151515152f, 0.027436527436527438f, 0.030048076923076924f, 0.015625f, 0.03209459459459459f, 1f, 1f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.5867346938775511f});
        featureMap.put('7', new float[]{0.015384615384615385f, 0.018218623481781375f, 0.04188034188034188f, 0.0f, 0.02874493927125506f, 0.0f, 0.020757020757020756f, 0.007101086048454469f, 0.0f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.5854922279792746f});
        featureMap.put('8', new float[]{0.030303030303030304f, 0.015151515151515152f, 0.030303030303030304f, 0.035742035742035744f, 0.015151515151515152f, 0.036036036036036036f, 0.030448717948717948f, 0.015625f, 0.03251689189189189f, 0f, 2f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 2.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.5867346938775511f});
        featureMap.put('9', new float[]{0.03108003108003108f, 0.01594896331738437f, 0.03153153153153153f, 0.026806526806526808f, 0.015151515151515152f, 0.047092547092547093f, 0.02283653846153846f, 0.016036184210526317f, 0.030827702702702704f, 1f, 1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.5816326530612245f});
        featureMap.put('<', new float[]{0.0f, 0.027976190476190477f, 0.03414634146341464f, 0.0436046511627907f, 0.0011904761904761906f, 0.0f, 0.009179926560587515f, 0.03070175438596491f, 0.029525032092426188f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0677966101694916f});
        featureMap.put('>', new float[]{0.02857142857142857f, 0.029878048780487804f, 0.01125f, 0.0f, 0.003048780487804878f, 0.044375f, 0.03571428571428571f, 0.028241335044929396f, 0.0f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0423728813559323f});
        featureMap.put('@', new float[]{0.019461859979101357f, 0.024577167019027485f, 0.020053475935828877f, 0.0243096842383406f, 0.013365410318096765f, 0.01257606490872211f, 0.022177146720757268f, 0.025170998632010944f, 0.020622837370242213f, 1f, 2f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 2.0f, 0.0f, 0.0f, 2.0f, 0.0f, 2.0f, 2.0f, 2.0f, 2.0f, 0.9923076923076923f});
        featureMap.put('A', new float[]{0.0f, 0.035643070787637086f, 0.005675954592363261f, 0.02263681592039801f, 0.015684290412345054f, 0.026970411102382824f, 0.021538461538461538f, 0.0f, 0.016734143049932523f, 2f, 2f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 2.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.88f});
        featureMap.put('B', new float[]{0.03645484949832776f, 0.015384615384615385f, 0.03005366726296959f, 0.03702445652173913f, 0.015625f, 0.03561046511627907f, 0.03681626928471248f, 0.016129032258064516f, 0.03188297074268567f, 0f, 2f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 2.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.7015706806282722f});
        featureMap.put('C', new float[]{0.021873391662377766f, 0.015449070437287249f, 0.017096336499321574f, 0.017502612330198536f, 0.0f, 0.0f, 0.023976293103448277f, 0.015625f, 0.021875f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.8629441624365483f});
        featureMap.put('D', new float[]{0.034389140271493215f, 0.015384615384615385f, 0.024489795918367346f, 0.0196078431372549f, 0.0f, 0.02040816326530612f, 0.03478810879190386f, 0.016451612903225808f, 0.026662277814351546f, 0f, 0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.7853403141361257f});
        featureMap.put('E', new float[]{0.03645484949832776f, 0.015384615384615385f, 0.013595706618962432f, 0.03702445652173913f, 0.015625f, 0.010901162790697675f, 0.03681626928471248f, 0.016129032258064516f, 0.016129032258064516f, 3f, 1f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 3.0f, 1.0f, 1.0f, 1.0f, 0.0f, 2.0f, 0.0f, 2.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.7015706806282722f});
        featureMap.put('F', new float[]{0.03984375f, 0.015625f, 0.015625f, 0.04047619047619048f, 0.015873015873015872f, 0.00960735171261487f, 0.025f, 0.0f, 0.0f, 3f, 1f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 2.0f, 1.0f, 1.0f, 1.0f, 0.0f, 2.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.6243386243386243f});
        featureMap.put('G', new float[]{0.024446731857951622f, 0.015187221785807803f, 0.022388059701492536f, 0.017241379310344827f, 0.0023923444976076554f, 0.021103896103896104f, 0.023706896551724137f, 0.015899122807017545f, 0.026506696428571428f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 2.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.868020304568528f});
        featureMap.put('H', new float[]{0.020833333333333332f, 0.0f, 0.021739130434782608f, 0.036375661375661374f, 0.015873015873015872f, 0.037267080745341616f, 0.020833333333333332f, 0.0f, 0.021739130434782608f, 4f, 2f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 2.0f, 2.0f, 0.0f, 2.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 2.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.7540106951871658f});
        featureMap.put('I', new float[]{1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0053475935828877f});
        featureMap.put('J', new float[]{0.0f, 0.0f, 0.034482758620689655f, 0.0f, 0.0f, 0.034482758620689655f, 0.03694068678459938f, 0.016129032258064516f, 0.0389321468298109f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.47643979057591623f});
        featureMap.put('K', new float[]{0.014694894146948941f, 0.014196762141967622f, 0.014990953734815198f, 0.031313131313131314f, 0.023989898989898988f, 0.0f, 0.014545454545454545f, 0.006233766233766234f, 0.021024258760107817f, 4f, 2f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 2.0f, 2.0f, 0.0f, 2.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 2.0f, 1.0f, 2.0f, 1.0f, 0.7581395348837209f});
        featureMap.put('L', new float[]{0.02702702702702703f, 0.0f, 0.0f, 0.02702702702702703f, 0.0f, 0.0f, 0.041848299912816043f, 0.016129032258064516f, 0.016129032258064516f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.5714285714285714f});
        featureMap.put('M', new float[]{0.03622421998942359f, 0.0f, 0.04004449388209121f, 0.030142781597038603f, 0.005913978494623656f, 0.03170189098998888f, 0.01639344262295082f, 0.03888888888888889f, 0.017241379310344827f, 2f, 0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.9728260869565217f});
        featureMap.put('N', new float[]{0.038584183673469385f, 0.0009765625f, 0.021739130434782608f, 0.02040816326530612f, 0.020833333333333332f, 0.021739130434782608f, 0.02040816326530612f, 0.0020491803278688526f, 0.03991446899501069f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.7606382978723404f});
        featureMap.put('O', new float[]{0.024129353233830846f, 0.015178345560333924f, 0.024351924587588374f, 0.01691919191919192f, 0.0f, 0.018075491759702286f, 0.023958333333333335f, 0.01641949152542373f, 0.024945175438596492f, 0f, 0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.8934010152284264f});
        featureMap.put('P', new float[]{0.036684782608695655f, 0.015625f, 0.030894886363636364f, 0.037267080745341616f, 0.015873015873015872f, 0.023809523809523808f, 0.021739130434782608f, 0.0f, 0.0f, 1f, 1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.7195767195767195f});
        featureMap.put('Q', new float[]{0.023625624716038164f, 0.01431540060032325f, 0.021723561709238483f, 0.016359447004608296f, 0.0f, 0.017675544794188862f, 0.020398481973434534f, 0.022902603664416585f, 0.036390827517447655f, 2f, 2f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 2.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.8708133971291866f});
        featureMap.put('R', new float[]{0.03118661257606491f, 0.014963880288957688f, 0.019786096256684493f, 0.03169371196754564f, 0.027089783281733747f, 0.010427807486631016f, 0.014106583072100314f, 0.001063264221158958f, 0.021212121212121213f, 2f, 2f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 2.0f, 1.0f, 2.0f, 1.0f, 0.8415841584158416f});
        featureMap.put('S', new float[]{0.027985074626865673f, 0.015242934264845983f, 0.01946787800129786f, 0.012941919191919192f, 0.01579626047711154f, 0.019104084321475624f, 0.0224609375f, 0.015625f, 0.029891304347826088f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.7157360406091371f});
        featureMap.put('T', new float[]{0.015625f, 0.03571428571428571f, 0.015625f, 0.0f, 0.02040816326530612f, 0.0f, 0.0f, 0.02040816326530612f, 0.0f, 3f, 1f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 2.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.7671957671957672f});
        featureMap.put('U', new float[]{0.020833333333333332f, 0.0f, 0.021739130434782608f, 0.020833333333333332f, 0.0f, 0.021739130434782608f, 0.028561827956989246f, 0.016129032258064516f, 0.030154277699859747f, 2f, 0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 2.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.7421052631578947f});
        featureMap.put('V', new float[]{0.016450648055832504f, 0.0f, 0.021796218487394957f, 0.01821401467240071f, 0.005404014410705095f, 0.014125799573560768f, 0.008731381612737545f, 0.031086729362591433f, 0.0f, 2f, 0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 2.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.8606965174129353f});
        featureMap.put('W', new float[]{0.010413051023950017f, 0.023429364803887538f, 0.014036958066808812f, 0.016834432488719193f, 0.020999652898299203f, 0.012260127931769723f, 0.02522361359570662f, 0.006618962432915921f, 0.01978021978021978f, 2f, 0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 2.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.2864321608040201f});
        featureMap.put('X', new float[]{0.01685985247629083f, 0.007063356164383561f, 0.020874103065883887f, 0.0f, 0.037109375f, 0.0f, 0.023076923076923078f, 0.0015625f, 0.019501133786848073f, 4f, 2f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 2.0f, 2.0f, 0.0f, 2.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 2.0f, 0.0f, 0.0f, 2.0f, 0.0f, 2.0f, 2.0f, 2.0f, 2.0f, 0.8930232558139535f});
        featureMap.put('Y', new float[]{0.01999080882352941f, 0.0f, 0.022058823529411766f, 0.0023320895522388058f, 0.03125f, 0.0026480500722195475f, 0.0f, 0.015625f, 0.0f, 3f, 1f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 2.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.945273631840796f});
        featureMap.put('Z', new float[]{0.011930926216640502f, 0.01730769230769231f, 0.03645484949832776f, 0.0047831632653061226f, 0.026041666666666668f, 0.0f, 0.04114549045424622f, 0.016129032258064516f, 0.016129032258064516f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.7486910994764397f});
        featureMap.put('[', new float[]{0.09302325581395349f, 0.011627906976744186f, 0.011627906976744186f, 0.08333333333333333f, 0.0f, 0.0f, 0.09236947791164658f, 0.012048192771084338f, 0.012048192771084338f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.13385826771653545f});
        featureMap.put('^', new float[]{0.0006613756613756613f, 0.052845528455284556f, 0.0f, 0.026530612244897958f, 0.004181184668989547f, 0.024285714285714285f, 0.03361344537815126f, 0.0f, 0.03455882352941177f, 2f, 0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.1714285714285715f});
        featureMap.put('_', new float[]{1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2f, 0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 2.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 156.0f});
        featureMap.put('`', new float[]{0.07142857142857142f, 0.037815126050420166f, 0.0f, 0.0f, 0.07563025210084033f, 0.0f, 0.0f, 0.00980392156862745f, 0.09444444444444444f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.225f});
        featureMap.put('a', new float[]{0.02727272727272727f, 0.02f, 0.027317073170731707f, 0.026363636363636363f, 0.02f, 0.03414634146341464f, 0.032196969696969696f, 0.023255813953488372f, 0.03861788617886179f, 2f, 2f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 2.0f, 0.8648648648648649f});
        featureMap.put('b', new float[]{0.03189792663476874f, 0.015561015561015561f, 0.006926406926406926f, 0.03724696356275304f, 0.0f, 0.03208791208791209f, 0.041353383458646614f, 0.016302016302016303f, 0.03310657596371882f, 1f, 2f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 2.0f, 0.0f, 0.5670103092783505f});
        featureMap.put('c', new float[]{0.032520325203252036f, 0.020833333333333332f, 0.0268640350877193f, 0.024390243902439025f, 0.0f, 0.0f, 0.03523035230352303f, 0.02277777777777778f, 0.03567251461988304f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.85f});
        featureMap.put('d', new float[]{0.006778309409888357f, 0.015151515151515152f, 0.03463203463203463f, 0.030364372469635626f, 0.0f, 0.03912087912087912f, 0.030492898913951544f, 0.015873015873015872f, 0.04671201814058957f, 1f, 1f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.5670103092783505f});
        featureMap.put('e', new float[]{0.03391472868217054f, 0.02132936507936508f, 0.029166666666666667f, 0.04354280059376546f, 0.02127659574468085f, 0.02553191489361702f, 0.034108527131782945f, 0.022222222222222223f, 0.030555555555555555f, 1f, 1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.8928571428571429f});
        featureMap.put('f', new float[]{0.015384615384615385f, 0.06783216783216783f, 0.026153846153846153f, 0.0f, 0.045454545454545456f, 0.0f, 0.0f, 0.045454545454545456f, 0.0f, 4f, 1f, 1.0f, 0.0f, 2.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 2.0f, 3.0f, 0.0f, 1.0f, 1.0f, 2.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.33678756476683935f});
        featureMap.put('g', new float[]{0.029044117647058824f, 0.015082956259426848f, 0.04332273449920509f, 0.029850746268656716f, 0.0057405281285878304f, 0.04356595401371521f, 0.02f, 0.0252465483234714f, 0.03451143451143451f, 1f, 2f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 2.0f, 1.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 1.0f, 0.58f});
        featureMap.put('h', new float[]{0.033035714285714286f, 0.015625f, 0.0107421875f, 0.04308390022675737f, 0.0f, 0.03273809523809524f, 0.02857142857142857f, 0.0f, 0.03125f, 3f, 1f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 1.0f, 1.0f, 0.0f, 2.0f, 1.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.5343915343915344f});
        featureMap.put('k', new float[]{0.02564102564102564f, 0.003869969040247678f, 0.015931372549019607f, 0.03980099502487562f, 0.025923016496465043f, 0.0f, 0.02097902097902098f, 0.01674641148325359f, 0.022306397306397305f, 4f, 2f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 2.0f, 2.0f, 0.0f, 2.0f, 1.0f, 1.0f, 1.0f, 1.0f, 2.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 2.0f, 0.0f, 2.0f, 0.0f, 0.5621890547263682f});
        featureMap.put('l', new float[]{1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.005291005291005291f});
        featureMap.put('m', new float[]{0.04002760524499655f, 0.03681626928471248f, 0.03243050605844619f, 0.015873015873015872f, 0.016129032258064516f, 0.01639344262295082f, 0.015873015873015872f, 0.015762463343108504f, 0.01639344262295082f, 3f, 1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 3.0f, 0.0f, 0.0f, 2.0f, 2.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.3777777777777778f});
        featureMap.put('n', new float[]{0.05217391304347826f, 0.021739130434782608f, 0.038866930171278f, 0.02857142857142857f, 0.0f, 0.030303030303030304f, 0.02857142857142857f, 0.0f, 0.030303030303030304f, 3f, 1f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 1.0f, 1.0f, 0.0f, 2.0f, 1.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.7555555555555555f});
        featureMap.put('o', new float[]{0.030995934959349592f, 0.021354166666666667f, 0.03289473684210526f, 0.024909185262065387f, 0.0f, 0.026875699888017916f, 0.03197831978319783f, 0.022222222222222223f, 0.03450292397660819f, 0f, 0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.85f});
        featureMap.put('p', new float[]{0.0430622009569378f, 0.015561015561015561f, 0.0341991341991342f, 0.03708133971291866f, 0.0f, 0.033766233766233764f, 0.03125f, 0.016047297297297296f, 0.005357142857142857f, 1f, 1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.5612244897959183f});
        featureMap.put('q', new float[]{0.03508771929824561f, 0.01597051597051597f, 0.04415584415584416f, 0.03070175438596491f, 0.0f, 0.04199134199134199f, 0.005756578947368421f, 0.016469594594594593f, 0.03214285714285714f, 1f, 2f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2.0f, 1.0f, 1.0f, 0.0f, 0.0f, 2.0f, 0.0f, 1.0f, 0.5612244897959183f});
        featureMap.put('r', new float[]{0.0671077504725898f, 0.0266798418972332f, 0.02391304347826087f, 0.043478260869565216f, 0.0f, 0.0f, 0.043478260869565216f, 0.0f, 0.0f, 3f, 1f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 1.0f, 2.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.48148148148148145f});
        featureMap.put('s', new float[]{0.03860294117647059f, 0.020833333333333332f, 0.021484375f, 0.02002503128911139f, 0.02256608639587363f, 0.02925531914893617f, 0.032679738562091505f, 0.022222222222222223f, 0.04375f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.7071428571428572f});
        featureMap.put('t', new float[]{0.014925373134328358f, 0.07726075504828797f, 0.014925373134328358f, 0.0f, 0.058823529411764705f, 0.0f, 0.0f, 0.05972850678733032f, 0.014423076923076924f, 4f, 1f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 2.0f, 3.0f, 0.0f, 1.0f, 2.0f, 2.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.2562814070351759f});
        featureMap.put('u', new float[]{0.02857142857142857f, 0.0f, 0.030303030303030304f, 0.02857142857142857f, 0.0f, 0.030303030303030304f, 0.038538205980066444f, 0.023255813953488372f, 0.05496828752642706f, 3f, 1f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 2.0f, 2.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.7686567164179104f});
        featureMap.put('v', new float[]{0.023871302542812663f, 0.0f, 0.030235162374020158f, 0.028101802757158005f, 0.007065217391304348f, 0.02402745995423341f, 0.014634146341463415f, 0.041666666666666664f, 0.0f, 2f, 0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 2.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.8623188405797102f});
        featureMap.put('w', new float[]{0.014960106382978724f, 0.02769334684228301f, 0.01988140913847227f, 0.018342391304347828f, 0.030020703933747412f, 0.01674982181040627f, 0.033735795454545456f, 0.012626262626262626f, 0.023099850968703428f, 2f, 0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 2.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.3722627737226278f});
        featureMap.put('x', new float[]{0.02495908346972177f, 0.009615384615384616f, 0.021794871794871794f, 0.0f, 0.05560200668896321f, 0.0f, 0.02893617021276596f, 0.0026086956521739132f, 0.027555555555555555f, 4f, 2f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 2.0f, 2.0f, 0.0f, 2.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 2.0f, 0.0f, 0.0f, 2.0f, 0.0f, 2.0f, 2.0f, 2.0f, 2.0f, 0.8961038961038961f});
        featureMap.put('y', new float[]{0.02509720749381407f, 0.0f, 0.033816425120772944f, 0.01757532281205165f, 0.03272058823529412f, 0.004524886877828055f, 0.013303769401330377f, 0.019696969696969695f, 0.0f, 3f, 1f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 1.0f, 2.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.5911330049261084f});
        featureMap.put('z', new float[]{0.020716685330347144f, 0.02645198389879241f, 0.04802431610942249f, 0.006864988558352402f, 0.023501762632197415f, 0.0f, 0.05087719298245614f, 0.022222222222222223f, 0.022222222222222223f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.7971014492753623f});
        featureMap.put('{', new float[]{0.0f, 0.04488232074438971f, 0.01206896551724138f, 0.02959830866807611f, 0.028792912513842746f, 0.0f, 0.0f, 0.04593837535014006f, 0.011764705882352941f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.2441860465116279f});
        featureMap.put('|', new float[]{1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0038461538461538464f});
        featureMap.put('}', new float[]{0.0109717868338558f, 0.04488232074438971f, 0.0f, 0.0f, 0.03065134099616858f, 0.03103448275862069f, 0.012834224598930482f, 0.04481792717086835f, 0.0f, 2f, 0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 2.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.24324324324324326f});
        featureMap.put('~', new float[]{0.0392156862745098f, 0.014666666666666666f, 0.022222222222222223f, 0.03221288515406162f, 0.06142857142857143f, 0.06994047619047619f, 0.0196078431372549f, 0.0f, 0.0f, 2f, 0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 3.6341463414634148f});
    }

    @Override
    public Image proceed(Image image) {
        Bitmap bm = image.toBitmap();
        Canvas canvas = new Canvas(bm);

        for (AreaPrediction areaPrediction : getPredictions(image)) {
            char prediction = areaPrediction.prediction;
            Pair<Integer, Integer> lowerBound = areaPrediction.area.lowerBound;
            Pair<Integer, Integer> upperBound = areaPrediction.area.upperBound;

            Paint paint = new Paint();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.GREEN);
            paint.setStrokeWidth(1);
            canvas.drawRect(upperBound.first - 1, upperBound.second - 1, lowerBound.first, lowerBound.second, paint);

            paint = new Paint();
            paint.setColor(Color.RED);
            paint.setTextSize(24);
            canvas.drawText(
                    prediction + "",
                    (upperBound.first + lowerBound.first) / 2,
                    lowerBound.second + 20,
                    paint
            );
        }

        return Image.fromBitmap(bm);
    }

    public static class Feature {
        int[] p11corner;
        int[] p12corner;
        int[] p21corner;
        int[] p22corner;
        int[] p31corner;
        int[] p13corner;

        int nCorner;

        int[] p11intersection;
        int[] p12intersection;
        int[] p21intersection;
        int[] p22intersection;
        int[] p31intersection;
        int[] p13intersection;

        int nIntersection;

        float[] r11;
        float ratio;

        public Feature() {
            p11corner = new int[9];
            p12corner = new int[6];
            p21corner = new int[6];
            p22corner = new int[4];
            p31corner = new int[3];
            p13corner = new int[3];

            nCorner = 0;

            p11intersection = new int[9];
            p12intersection = new int[6];
            p21intersection = new int[6];
            p22intersection = new int[4];
            p31intersection = new int[3];
            p13intersection = new int[3];

            nIntersection = 0;

            r11 = new float[9];
            ratio = 1;
        }

        public Feature(int[] p11corner, int[] p12corner, int[] p21corner, int[] p22corner, int[] p31corner, int[] p13corner, int nCorner, int[] p11intersection, int[] p12intersection, int[] p21intersection, int[] p22intersection, int[] p31intersection, int[] p13intersection, int nIntersection, float[] r11, float ratio) {
            this.p11corner = p11corner;
            this.p12corner = p12corner;
            this.p21corner = p21corner;
            this.p22corner = p22corner;
            this.p31corner = p31corner;
            this.p13corner = p13corner;
            this.nCorner = nCorner;
            this.p11intersection = p11intersection;
            this.p12intersection = p12intersection;
            this.p21intersection = p21intersection;
            this.p22intersection = p22intersection;
            this.p31intersection = p31intersection;
            this.p13intersection = p13intersection;
            this.nIntersection = nIntersection;
            this.r11 = r11;
            this.ratio = ratio;
        }
    }

    public static class AreaFeature {
        public Util.AreaBox area;
        public Feature feature;

        public AreaFeature(Util.AreaBox area, Feature feature) {
            this.area = area;
            this.feature = feature;
        }
    }

    public static List<AreaFeature> getFeatures(Image image) {
        image = image.clone();

        List<AreaFeature> result = new ArrayList<>();

        List<Skeleton.AreaCriticalPoint> areaCriticalPoints = Skeleton.getCriticalPoints(image);
        for (Skeleton.AreaCriticalPoint area : areaCriticalPoints) {
            int width = area.area.lowerBound.first - area.area.upperBound.first;
            int height = area.area.lowerBound.second - area.area.upperBound.second;
            int x1 = area.area.upperBound.first + width / 3;
            int x2 = area.area.upperBound.first + (width / 3) * 2;
            int y1 = area.area.upperBound.second + height / 3;
            int y2 = area.area.upperBound.second + (height / 3) * 2;

            int[] p11corner = new int[9];
            int[] p11intersection = new int[9];

            for (Skeleton.CriticalPoint criticalPoint : area.criticalPoints) {
                int i = 0;
                int j = 0;
                if (criticalPoint.pos.first < x1) {
                    j = 0;
                } else if (criticalPoint.pos.first < x2) {
                    j = 1;
                } else {
                    j = 2;
                }
                if (criticalPoint.pos.second < y1) {
                    i = 0;
                } else if (criticalPoint.pos.second < y2) {
                    i = 1;
                } else {
                    i = 2;
                }

                if (criticalPoint.type == Skeleton.CriticalPoint.Type.CORNER) {
                    p11corner[i * 3 + j]++;
                } else {
                    p11intersection[i * 3 + j]++;
                }
            }

            int[] p12corner = new int[6];
            int[] p21corner = new int[6];
            int[] p22corner = new int[4];
            int[] p31corner = new int[3];
            int[] p13corner = new int[3];

            int[] p12intersection = new int[6];
            int[] p21intersection = new int[6];
            int[] p22intersection = new int[4];
            int[] p31intersection = new int[3];
            int[] p13intersection = new int[3];

            for (int i = 0; i < 3; i++) {
                p21corner[i * 2] = p11corner[i * 3] + p11corner[i * 3 + 1];
                p21corner[1 * 2 + 1] = p11corner[i * 3 + 1] + p11corner[i * 3 + 2];
                p21intersection[i * 2] = p11intersection[i * 3] + p11intersection[i * 3 + 1];
                p21intersection[1 * 2 + 1] = p11intersection[i * 3 + 1] + p11intersection[i * 3 + 2];

                p12corner[i] = p11corner[i] + p11corner[i + 3];
                p12corner[i + 3] = p11corner[i + 3] + p11corner[i + 6];
                p12intersection[i] = p11intersection[i] + p11intersection[i + 3];
                p12intersection[i + 3] = p11intersection[i + 3] + p11intersection[i + 6];
            }

            for (int i = 0; i < 2; i++) {
                p22corner[i] = p21corner[i] + p21corner[i + 2];
                p22corner[i + 1] = p21corner[i] + p21corner[i + 2];

                p22intersection[i] = p21intersection[i] + p21intersection[i + 2];
                p22intersection[i + 1] = p21intersection[i] + p21intersection[i + 2];
            }

            for (int i = 0; i < 3; i++) {
                p31corner[i] = p11corner[i * 3] + p11corner[i * 3 + 1] + p11corner[i * 3 + 2];
                p31intersection[i] = p11intersection[i * 3] + p11intersection[i * 3 + 1] + p11intersection[i * 3 + 2];

                p13corner[i] = p12corner[i] + p11corner[6 + i];
                p13intersection[i] = p12intersection[i] + p11intersection[6 + i];
            }

            int nCorner = p31corner[0] + p31corner[1] + p31corner[2];
            int nIntersection = p31corner[0] + p31corner[1] + p31corner[2];
            float ratio = (float) width / (float) height;

            float[] r11 = new float[9];

            for (int x = area.area.upperBound.first; x < area.area.lowerBound.first; x++) {
                for (int y = area.area.upperBound.second; y < area.area.lowerBound.second; y++) {
                    int i = 0;
                    int j = 0;
                    if (x < x1) {
                        j = 0;
                    } else if (x < x2) {
                        j = 1;
                    } else {
                        j = 2;
                    }
                    if (y < y1) {
                        i = 0;
                    } else if (y < y2) {
                        i = 1;
                    } else {
                        i = 2;
                    }
                    r11[i * 3 + j] += 1;
                }
            }
            for (int i = 0; i < 9; i++) {
                r11[i] /= width * height;
            }

            Feature feature = new Feature(
                    p11corner, p12corner, p21corner, p22corner, p31corner, p13corner, nCorner,
                    p11intersection, p12intersection, p21intersection, p22intersection,
                    p31intersection, p13intersection, nIntersection, r11, ratio);
            result.add(new AreaFeature(area.area.clone(), feature));
        }

        return result;
    }

    public static class AreaPrediction {
        public Util.AreaBox area;
        public char prediction;

        public AreaPrediction(Util.AreaBox area, char prediction) {
            this.area = area;
            this.prediction = prediction;
        }
    }

    public static List<AreaPrediction> getPredictions(Image image) {
        List<AreaPrediction> result = new ArrayList<>();
        for (AreaFeature areaFeature : getFeatures(image)) {
            Feature feature = areaFeature.feature;

            float[] featureArr = new float[50];
            for (int i = 0; i < 9; i++) {
                featureArr[i] = feature.r11[i];
                featureArr[11 + i] = feature.p11corner[i];
                featureArr[20 + i] = feature.p11intersection[i];
            }
            for (int i = 0; i < 3; i++) {
                featureArr[29 + i] = feature.p13corner[i];
                featureArr[32 + i] = feature.p31corner[i];
                featureArr[39 + i] = feature.p13intersection[i];
                featureArr[42 + i] = feature.p31intersection[i];
            }
            for (int i = 0; i < 4; i++) {
                featureArr[35 + i] = feature.p22corner[i];
                featureArr[45 + i] = feature.p22intersection[i];
            }
            featureArr[9] = feature.nCorner;
            featureArr[10] = feature.nIntersection;
            featureArr[49] = feature.ratio;

            float minDist = -1;
            Character prediction = '?';
            for (Map.Entry<Character, float[]> pair : featureMap.entrySet()) {
                Character character = pair.getKey();
                float[] template = pair.getValue();

                float dist = 0;
                for (int i = 0; i < min(featureArr.length, template.length); i++) {
                    dist += abs(featureArr[i] - template[i]) / featureWeight[i];
                }

                if (minDist < 0 || dist < minDist) {
                    minDist = dist;
                    prediction = character;
                }
            }

            result.add(new AreaPrediction(areaFeature.area.clone(), prediction));
        }
        return result;
    }

}
